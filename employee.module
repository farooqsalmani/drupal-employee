<?php
// $Id: employee.module, v 7.0 2009/07/12 14:45:27 $

/**
 * @file
 * Enables the user to manage Employee Information.
 */

/**
 * Implementation of hook_permission().
 */
function employee_permission() {
    return array(
	'add employee' => array(
	    'title' => t('Add Employees'),
	    'description' => t('User can add new employee details'),
	),
	'edit employee' => array(
	    'title' => t('Edit Employees'),
	    'description' => t("User can edit existing employee's details"),
	),
	'show employee' => array(
	    'title' => t('List Employees'),
	    'description' => t('User can see all the employees'),
	),
	'delete employee' => array(
	    'title' => t('Delete Employees'),
	    'description' => t('User can delete employee details'),
	),
    );
}

/**
 * Implementation of hook_menu().
 * @author Farooq Ahmad
 * @return array
 */
function employee_menu(){
    $items['employee/list_employees'] = array(
        'title' => t('Employees'),
        'page callback' => 'list_employees',
        'access arguments' => array('show employee'),
        'type' => MENU_CALLBACK,
    );
    $items['employee/add'] = array(
        'title' => t('Employee Add Form'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('employees_add_form'),
        'access arguments' => array('add employee'),
        'type' => MENU_CALLBACK,
    );
    $items['employee/edit/%'] = array(
        'title' => t('Employee Edit Form'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('employees_add_form',2),
        'access arguments' => array('edit employee'),
        'type' => MENU_CALLBACK,
    );
    $items['employee/delete/%'] = array(
        'title' => t('Employee Edit Form'),
        'page callback' => 'delete_employee',
        'access arguments' => array('delete employee'),
        'type' => MENU_CALLBACK,
    );
    return $items;
}

/**
 * @author Farooq Ahmad
 * @return array 
 */
function employees_add_form(){
    $uid = arg(2);
    $emp = load_employee($uid);

    $forms=array();

    $form['employeeform'] = array(
        '#type' => 'fieldset',
        '#title' => t('Employee Form')
    );

    $form['employeeform']['id'] = array(
        '#type' => 'hidden',
        '#title' => '',
        '#default_value' => isset($emp->id) ? $emp->id : ''
    );

    $form['employeeform']['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Name'),
        '#size' => 40,
        '#required' => true,
        '#default_value' => isset($emp->name) ? $emp->name : ''
    );
    $form['employeeform']['email'] = array(
        '#type' => 'textfield',
        '#title' => t('Email'),
        '#size' => 40,
        '#required' => true,
        '#default_value' => isset($emp->email) ? $emp->email : ''
    );
    $form['employeeform']['age'] = array(
        '#type' => 'textfield',
        '#title' => t('Age'),
        '#size' => 10,
        '#required' => true,
        '#default_value' => isset($emp->age) ? $emp->age : ''
    );
    $form['employeeform']['gender'] = array(
        '#type' => 'radios',
        '#title' => t('Gender'),
        '#options' => array(
            'Male' => t('Male'), 
            'Female' => t('Female')
        ),
        '#default_value' => isset($emp->gender) ? $emp->gender : t('Male')
    );

    $form['employeeform']['address'] = array(
        '#type' => 'textfield',
        '#title' => t('Address'),
        '#size' => 90,
        '#default_value' => isset($emp->address) ? $emp->address : ''
    );
    $form['employeeform']['nationality'] = array(
        '#type' => 'select',
        '#title' => 'Nationality',
        '#options' => array(
            'indian' => t('Indian'),
            'american' => t('American'),
            'arabian' => t('Arabian'),
        ),
        '#default_value' => isset($emp->nationality) ? $emp->nationality : ''
    );

    $form['employeeform']['salary'] = array(
        '#type' => 'textfield',
        '#title' => t('Salary'),
        '#size' => 20,
        '#required' => true,
        '#default_value' => isset($emp->salary) ? $emp->salary : ''
    );
    $form['employeeform']['save'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );
    $form['employeeform']['cancel'] = array(
        '#type' => 'reset',
        '#value' => t('Cancel'),
    );
    return $form;
}

/**
 * @author Farooq Ahmad
 * @param type $form
 * @param type $form_state 
 */
function employees_add_form_validate($form, $form_state)
{
    $val= & $form_state['values'];

    if(!filter_var($val['email'], FILTER_VALIDATE_EMAIL))
    {
	form_set_error('email', t('Email is not valid.'));
    }
    
    if(!filter_var($val['age'], FILTER_VALIDATE_INT))
    {
	form_set_error('age', t('Age must be numeric.'));
    }
    elseif($val['age'] > 99)
    {
	form_set_error('age','Age must be less than 100 years.');
    }
    
    if(!filter_var($val['salary'], FILTER_VALIDATE_FLOAT))
    {
	form_set_error('salary', t('Salay can contain only numeric values.'));
    }
    elseif($val['salary'] > 50000)
    {
	form_set_error('salary', t('Salary can be at most 50000 thousand.'));
    }
}

/**
 * @author Farooq Ahmad
 * @param type $form
 * @param type $form_state 
 */
function employees_add_form_submit($form, $form_state)
{
    $val = & $form_state['values'];
    
    $data = array(
        'name' => $val['name'],
        'email' => $val['email'],
        'age' => $val['age'],
        'gender' => $val['gender'],
        'address' => $val['address'],
        'nationality' => $val['nationality'],
        'salary' => $val['salary'],
        'created' => time()
    );
    
    if(isset($val['id']) && $val['id']!='')
    {
	$handle = db_update('employee')->fields($data)->condition('id', $val['id'], '=')->execute();
    }
    else
    {	
	$handle = db_insert('employee')->fields($data)->execute();
    }

    if($handle)
    {
	drupal_set_message(t('Emaployee information is saved'));
	drupal_goto('employee/list_employees');
    }
    else
    {
	drupal_set_message(t('There was problem to save employee information, please try again.'),'error');
	drupal_goto('employee/edit/'.$val['id']);
    }
    
}

/**
 * @author Farooq Ahmad
 * @return void
 */
function delete_employee()
{
    $eid = arg(2);
    
    $handle = db_delete('employee')->condition('id', $eid)->execute();

    if($handle)
    {
	drupal_set_message(t('Employee deleted.'));
    }
    else
    {
	drupal_set_message(t('There was problem to delete employee information, please try again.'),'error');
    }
    drupal_goto('employee/list_employees');
}

/**
 * @author Farooq Ahmad
 * @return string 
 */
function list_employees()
{
    
    if (isset($_GET['sort']) && isset($_GET['order']))
    {
	// Sort it Ascending or Descending?
	if ($_GET['sort'] == 'asc')
        {
	    $sort = 'ASC';
        }
	else
        {
	    $sort = 'DESC';
        }

	// Which column will be sorted
	switch ($_GET['order']) {
	    case t('Name'):
		$order = 'name';
		break;
	    case t('Email'):
		$order = 'email';
		break;
	    case t('Age'):
		$order = 'age';
		break;
	    case t('Gender'):
		$order = 'gender';
		break;
	    case t('Address'):
		$order = 'address';
		break;
	    case t('Nationality'):
		$order = 'nationality';
		break;
	    case t('Salary'):
		$order = 'salary';
		break;
	    default:
		$order = 'name';
	}
    } else {
	// Default sort
	$sort = 'ASC';
	$order = ' name';
    }
    
    $output = "";
    $content = '<p align="right">'.l(t('Add New'), 'employee/add', array('title' => t('Add new employee details'))).'</p>';
    $output .= $content;
    // Select table
    $query = db_select("employee", "r");
    // Select fields
    $query->fields("r", array("id", "name", "email", "age", "gender", "address", "nationality", "salary"));
    
    // Set order by
    $query->orderBy($order, $sort);
    
    // For pagination
    $query = $query->extend('TableSort')->extend('PagerDefault')->limit(10);

    // Execute query
    $result = $query->execute();

    // Prepare table header
    $header = array(
	array(
	    "data" => t('Name'),
	    "field" => "name"
	),
	array(
	    "data" => t('Email'),
	    "field" => "email"
	),
	array(
	    "data" => t('Age'),
	    "field" => "age"
	),
	array(
	    "data" => t('Gender'),
	    "field" => "gender"
	),
	array(
	    "data" => t('Address'),
	    "field" => "address"
	),
	array(
	    "data" => t('Nationality'),
	    "field" => "nationality"
	),
	array(
	    "data" => t('Salary'),
	    "field" => "salary"
	),
	array(
	    "data" => t('Action')
	)
    );
 
    $rows = array();

    // Looping for filling the table rows
    while ($data = $result->fetchObject()) 
    {
	// Fill the table rows
	$action_link = l(t('Edit'), 'employee/edit/'.$data->id)." | ".l(t('Delete'), 'employee/delete/'.$data->id);
	$rows[] = array(
	    $data->name,
	    $data->email,
	    $data->age,
	    $data->gender,
	    $data->address,
	    $data->nationality,
	    $data->salary,
	    $action_link
	);
    }

    // Output of table with the paging
    $output .= theme_table(
            array(
                "header" => $header,
                "rows" => $rows,
                "attributes" => array(),
                "sticky" => true, // Table header will be sticky
                "caption" => "",
                "colgroups" => array(),
                "empty" => t("Table has no row!") // The message to be displayed if table is empty
            )
    ) . theme("pager");

    return $output;
}

/**
 * @author Farooq Ahmad
 * @param type $eid
 * @return object 
 */
function load_employee($eid=null)
{
    $employee = new stdClass();
    if($eid)
    {
	$employee = new stdClass();
	$result = db_query('SELECT * FROM {employee} WHERE id = :id ', array(':id' => $eid));

	foreach($result as $row)
	{
	    $employee = $row;
	}
    }
    return $employee;
}
